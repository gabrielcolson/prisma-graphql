### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Mutation {
  createOnePost(authorId: ID!, content: String!, title: String!): Post!
  createOneUser(email: String!, username: String!): User!
}

enum OrderByArg {
  asc
  desc
}

type Post {
  author: User!
  content: String!
  createdAt: DateTime!
  id: String!
  slug: String!
  title: String!
  updatedAt: DateTime!
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  author: OrderByArg
  content: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  slug: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  userId: OrderByArg
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  content: StringFilter
  createdAt: DateTimeFilter
  id: UUIDFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  slug: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input PostWhereUniqueInput {
  id: String
  slug: String
}

type Query {
  ok: Boolean!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: String!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, skip: Int): [Post!]!
  updatedAt: DateTime!
  username: String!
}

input UserOrderByInput {
  createdAt: OrderByArg
  email: OrderByArg
  id: OrderByArg
  updatedAt: OrderByArg
  username: OrderByArg
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: UUIDFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}
